rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ============================================
    // HELPER FUNCTIONS
    // ============================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if the authenticated user matches the document owner
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if user is anonymous
    function isAnonymousUser() {
      return isAuthenticated() && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }
    
    // Get user's tier level from their document
    function getUserTier(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.tier.level;
    }
    
    // Get current user's tier from their document
    function getCurrentUserTier() {
      return getUserTier(request.auth.uid);
    }
    
    // Check if user has specific tier or higher
    function hasTierLevel(requiredLevel) {
      return isAuthenticated() && getCurrentUserTier() >= requiredLevel;
    }
    
    // Validate tier level is within bounds
    function isValidTierLevel(level) {
      return level >= 1 && level <= 5;
    }
    
    // Check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Check if referral code is being changed (not allowed)
    function referralCodeUnchanged() {
      return !('referralCode' in request.resource.data) || 
             request.resource.data.referralCode == resource.data.referralCode;
    }
    
    // ============================================
    // USERS COLLECTION
    // ============================================
    match /users/{userId} {
      // Read access
      allow read: if 
        // Users can read their own profile (including anonymous)
        isOwner(userId) ||
        // Admins can read any profile  
        isAdmin();
      
      // Create access
      allow create: if 
        // Authenticated users can create their own profile
        isOwner(userId) &&
        // UID must match auth UID
        request.resource.data.uid == request.auth.uid;
      
      // Update access
      allow update: if 
        // Users can update their own profile
        isOwner(userId) &&
        // UID cannot be changed
        request.resource.data.uid == resource.data.uid &&
        // Email cannot be changed (must use auth methods)
        (!('email' in request.resource.data) || request.resource.data.email == resource.data.email) &&
        // Referral code cannot be changed once set
        referralCodeUnchanged() &&
        // Cannot directly modify referral count (only via cloud functions)
        (!('referralCount' in request.resource.data) || 
         request.resource.data.referralCount == resource.data.referralCount) &&
        // Cannot set admin role
        (!('role' in request.resource.data) || request.resource.data.role != 'admin');
      
      // Delete access - only allow cleanup of anonymous users
      allow delete: if 
        // Admin can delete users
        isAdmin() ||
        // Cloud functions can delete (via service account)
        false;
    }
    
    // ============================================
    // REFERRALS COLLECTION
    // ============================================
    match /referrals/{referralCode} {
      // Read access - anyone can check if a referral code exists
      allow read: if true;
      
      // Create access - only via cloud functions
      allow create: if false;
      
      // Update access - only cloud functions can update (to add usedBy)
      allow update: if false;
      
      // Delete access - admins can delete
      allow delete: if isAdmin();
    }
    
    // ============================================
    // STATISTICS COLLECTIONS
    // ============================================
    
    // Global statistics
    match /statistics/{statId} {
      // Public read access for global stats
      allow read: if true;
      // Only cloud functions can write
      allow write: if false;
    }
    
    // Global stats document
    match /stats/global {
      // Public read access
      allow read: if true;
      // Only cloud functions can write
      allow write: if false;
    }
    
    // User blocking statistics
    match /blockingStats/{userId} {
      // Users can read their own stats
      allow read: if isOwner(userId) || isAdmin();
      // Only cloud functions can write (to ensure accuracy)
      allow write: if false;
    }
    
    // ============================================
    // TIER UPGRADES TRACKING
    // ============================================
    match /tierUpgrades/{upgradeId} {
      // Users can read their own upgrade history
      allow read: if 
        isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      // Only cloud functions can create
      allow create: if false;
      allow update: if false;
      allow delete: if isAdmin();
    }
    
    // ============================================
    // CUSTOM FILTERS (Tier 3+ Feature)
    // ============================================
    match /filters/{userId}/custom/{filterId} {
      // Read access
      allow read: if isOwner(userId) || isAdmin();
      
      // Write access - requires Tier 3 or higher
      allow create, update: if 
        isOwner(userId) && 
        hasTierLevel(3) &&
        // Validate filter data
        request.resource.data.keys().hasAll(['pattern', 'enabled', 'createdAt']) &&
        request.resource.data.pattern is string &&
        request.resource.data.enabled is bool;
      
      // Delete access
      allow delete: if isOwner(userId) && hasTierLevel(3);
    }
    
    // ============================================
    // WHITELISTS (Tier 3+ Feature)
    // ============================================
    match /whitelists/{userId}/domains/{domainId} {
      // Read access
      allow read: if isOwner(userId) || isAdmin();
      
      // Write access - requires Tier 3 or higher
      allow create, update: if 
        isOwner(userId) && 
        hasTierLevel(3) &&
        // Validate whitelist data
        request.resource.data.keys().hasAll(['domain', 'enabled']) &&
        request.resource.data.domain is string &&
        request.resource.data.enabled is bool;
      
      // Delete access
      allow delete: if isOwner(userId) && hasTierLevel(3);
    }
    
    // ============================================
    // EXTENSION SETTINGS SYNC
    // ============================================
    match /extensionSettings/{userId} {
      // Users can read their own settings
      allow read: if isOwner(userId);
      
      // Users can write their own settings
      allow write: if 
        isOwner(userId) &&
        // Validate settings structure
        request.resource.data.keys().hasAll(['updatedAt']);
      
      // Delete access
      allow delete: if isOwner(userId);
    }
    
    // ============================================
    // FEEDBACK AND REPORTS
    // ============================================
    match /feedback/{feedbackId} {
      // Users can read their own feedback
      allow read: if 
        isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      
      // Users can create feedback
      allow create: if 
        isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'message', 'createdAt']);
      
      // No updates allowed by users
      allow update: if isAdmin();
      
      // Only admins can delete
      allow delete: if isAdmin();
    }
    
    // ============================================
    // ADMIN DASHBOARD ACCESS
    // ============================================
    match /admin/{document=**} {
      // Only admins can access admin documents
      allow read, write: if isAdmin();
    }
    
    // ============================================
    // ANALYTICS AND TRACKING
    // ============================================
    match /analytics/{eventId} {
      // Only cloud functions can write analytics
      allow read: if isAdmin();
      allow write: if false;
    }
    
    // ============================================
    // USER SESSIONS (for engagement tracking)
    // ============================================
    match /sessions/{userId}/active/{sessionId} {
      // Users can read their own sessions
      allow read: if isOwner(userId);
      
      // Users can create/update their own sessions
      allow write: if 
        isOwner(userId) &&
        request.resource.data.keys().hasAll(['startTime', 'lastActivity']);
      
      // Users can delete their own sessions
      allow delete: if isOwner(userId);
    }
    
    // ============================================
    // NOTIFICATION TOKENS
    // ============================================
    match /notificationTokens/{userId}/tokens/{tokenId} {
      // Users can manage their own notification tokens
      allow read, write: if isOwner(userId);
    }
    
    // ============================================
    // SUBSCRIPTION MANAGEMENT (Future Premium Features)
    // ============================================
    match /subscriptions/{userId} {
      // Users can read their own subscription
      allow read: if isOwner(userId);
      // Only cloud functions can modify subscriptions
      allow write: if false;
    }
    
    // ============================================
    // ERROR LOGS (for debugging)
    // ============================================
    match /errorLogs/{errorId} {
      // Users can write error logs
      allow create: if 
        isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
      // Only admins can read/update/delete
      allow read, update, delete: if isAdmin();
    }
  }
}